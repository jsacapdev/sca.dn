# LUIS development build definition 

trigger:
- main
- feature/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'dev-lip-sp-01'
  productName: 'lip'
  environmentName: 'dev'
  environmentTagName: 'Development'
  instance: '01'
  environmentVariableKeyVault: 'kv-lz-$(productName)-ops-$(environmentName)-uks-$(instance)'
  resourceGroupName: 'rg-lz-$(productName)-$(environmentName)-uks-$(instance)'
  coreResourceGroupName: 'rg-lz-$(productName)-$(environmentName)-uks-$(instance)'
  apiName: 'api-lz-$(productName)-$(environmentName)-uks-$(instance)'
  linkedStorageAccount: 'st$(productName)$(environmentName)uks$(instance)'
  linkedStorageContainer: '$(productName)$(instance)lt'

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build and Publish
    workspace:
      clean: all    
    steps:

    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'tokenize arm parameters'
      inputs:
        rootDirectory: 'arm'
        targetFiles: '*.parameters.json'
        escapeType: none            

    - task: CopyFiles@2
      displayName: 'pack powershell core scripts'
      inputs:
        SourceFolder: pipelines
        Contents: '*.ps1'
        TargetFolder: '$(build.artifactstagingdirectory)/deploy'

    - task: CopyFiles@2
      displayName: 'pack infrastructure as code'
      inputs:
        SourceFolder: arm
        Contents: '*.json'
        TargetFolder: '$(build.artifactstagingdirectory)/deploy' 

    - task: DotNetCoreCLI@2
      displayName: 'Test premium gateway'
      inputs:
        command: 'test'
        projects: 'test/scaapi.tests/scaapi.tests.csproj'
        arguments: '-c release --collect:"XPlat Code Coverage"'
        publishTestResults: true
        testRunTitle: 'API Unit Tests'             

    - task: DotNetCoreCLI@2
      displayName: 'publish api'
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src/scaapi/scaapi.csproj'
        arguments: '-c release -o $(build.artifactstagingdirectory)/apis'         

    - task: PublishBuildArtifacts@1
      displayName: 'publish artifacts'
      inputs:
        ArtifactName: $(productName)

- stage: Deploy
  displayName: Deploy
  jobs:
  - deployment: DeployInfrastructure
    displayName: Deploy Infrastructure
    timeoutInMinutes: 60 
    environment: $(environmentName)
    strategy: 
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'deploy infrastructure'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: pscore
              scriptPath: '../$(productName)/deploy/deploy.ps1'
              arguments: '-CoreResourceGroupName "$(coreResourceGroupName)" -LinkedStorageAccount "$(linkedStorageAccount)" -LinkedStorageContainer "$(linkedStorageContainer)" -ResourceGroupName "$(resourceGroupName)" -EnvironmentTagName "$(environmentTagName)"'
              workingDirectory: '../$(productName)/deploy'

  - deployment: DeployApi
    displayName: Deploy Api
    pool:
      vmImage: 'Ubuntu-18.04'
    dependsOn: DeployInfrastructure
    condition: succeeded('DeployInfrastructure')
    environment: $(environmentName)
    strategy: 
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'deploy web app'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptLocation: inlineScript
              scriptType: pscore
              inlineScript: 'az webapp deployment source config-zip -g "$(resourceGroupName)" -n "$(apiName)" --src ../$(productName)/apis/scaapi.zip'
            condition: always()
